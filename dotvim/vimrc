scriptencoding utf-8
set encoding=utf-8

autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red

set nocompatible

let mapleader = ";"

" Create a soft link from $HOME/configs/dotvim/vim_ide.vim
" to $HOME/.config/vim_ide.vim to enable
let vim_ide_file=expand('~/.config/vim_ide.vim')
if filereadable(vim_ide_file)
	exec 'source' vim_ide_file
endif

if has("gui_running")
	set guioptions-=T " No toolbar
	set guioptions-=m " No menubar
	set gfn=Hack\ Regular\ 10
	set guicursor=a:blinkon0
endif

set ttyfast
set lazyredraw

" Sanity check for colors
if $TERM == "xterm-256color" || $TERM == "screen-256color" || $COLORTERM == "gnome-terminal"
	set t_Co=256
endif

colors peaksea
set background=dark
" Better matching completion menu
hi Pmenu ctermfg=0 ctermbg=6 guibg=#444444
hi PmenuSel ctermfg=7 ctermbg=4 guibg=#555555 guifg=#ffffff

set listchars=tab:>-,eol:$,trail:.,extends:#
set backspace=indent,eol,start
set tm=500 " time out to 500msec
set wildignore=*.swp,*.bak,*.pyc,*.class,*.o

" Put quickfix window always on bottom
botright cwindow
nnoremap Q gqap
vnoremap Q gq

" Visual
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y%{exists('g:loaded_fugitive')?fugitive#statusline():''}%{exists('g:loaded_rvm')?rvm#statusline():''}%=%-16(\ %l\[%v\],%c\ %)%L
syntax on

" Automatically open and close the popup menu / preview window
"au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
"set completeopt=menuone,menu,longest,preview
set completeopt=longest,menuone,preview

set history=2000
set nowrap
set nobackup
set noswapfile
set ruler
set laststatus=2
set hlsearch
set number
set wildmenu
set showtabline=2
set hidden " Don't force to write

" Display incomplete commands
set showcmd

" Do incremental searching
set incsearch

" When splitting, don't substitute the current
" buffer with the newly opened one
set splitbelow
set splitright
" All splits are equal
autocmd VimResized * wincmd =
set fillchars+=vert:│
hi VertSplit ctermbg=NONE guibg=NONE guifg=grey

" Undo related
set undofile
set undolevels=1000
set undoreload=10000
set undodir=~/.config/vim/undodir
if !isdirectory(&undodir) | call mkdir(&undodir, 'p', 0700) | endif

" Sane indent
set autoindent
set smarttab
set smartindent
set copyindent

" Padding when scrolling
" Vertical
set scrolloff=5
" Horizontal
set sidescrolloff=80

filetype on
filetype plugin indent on

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
    set mouse=a
endif

" #######################
" Encoding section
" #######################
" Default file encoding for new files
setglobal fenc=utf-8
"
" Auto detect file encoding when opening a file. To check what file encoding was
" selected run ":set fenc" and if you know the auto detection failed and want to
" force another one run ":edit ++enc=<your_enc>".
set fencs=utf-8,latin-1

" Internal encoding used by vim buffers, help and commands
set encoding=utf-8

" Terminal encoding used for input and terminal display
" Make sure your terminal is configured with the same encoding.
set tenc=utf-8

augroup my-human
    autocmd!
    autocmd FileType mail,human set formatoptions+=t textwidth=72
augroup end

" Reveal extra white spaces
"highlight ExtraWhitespace ctermbg=red guibg=red
" Show trailing whitespace:
match ExtraWhitespace /\s\+$/
" Show trailing whitepace and spaces before a tab:
match ExtraWhitespace /\s\+$\| \+\ze\t/
" Alternatively, the following pattern will match trailing whitespace, except
" when typing at the end of a line.
"match ExtraWhitespace /\s\+\%#\@<!$/

"#################################
"########### Mappings ############
"#################################
" Reload vimrc
nnoremap <leader><leader>v :source $MYVIMRC<CR>

" LEADER MAPPINGS
" Append to each matching line
nnoremap <leader>a :g/pattern/s/$/
" Execute macro on each matching line
nnoremap <leader>m :g/pattern/normal @q
" Go back to file where we jumped off
nnoremap <leader>b :e#<CR>
" Close current buffer
nnoremap <leader>, :bd<CR>

" Mappings for VimDiff
if &diff
	nnoremap <leader>1 diffput
	nnoremap <leader>2 diffget
endif

" Ctrl-C behaves like pressing Esc
inoremap <C-c> <Esc>

" Ctrl-Return adds a newline in command mode
nnoremap <C-CR> i<CR><Esc>

" Allow vi moving in insert mode when Alt is pressed
inoremap <A-h> <Left>
inoremap <A-k> <Up>
inoremap <A-j> <Down>
inoremap <A-l> <Right>
" Scrolling
nnoremap <C-A-j> <PageDown>
nnoremap <C-A-k> <PageUp>
inoremap <C-A-j> <ESC><C-E>i
inoremap <C-A-k> <ESC><C-Y>i
" Page up/down moving between buffers
nnoremap <C-h> :bprev<CR>
nnoremap <C-l> :bnext<CR>

" Sorry Vim guys, I'm used to readline
inoremap <C-a> <esc>I
inoremap <C-e> <esc>A
inoremap <C-d> <Delete>
inoremap <A-f> <C-Right>
inoremap <A-b> <C-Left>
"inoremap <A-d> <Esc><Right>dwi " Breaks small Ä

" More convenient moving between windows
nnoremap <M-h> <C-w>h
nnoremap <M-j> <C-w>j
nnoremap <M-k> <C-w>k
nnoremap <M-l> <C-w>l

" QuickFix mappings
nnoremap <C-n> :cn<CR>
nnoremap <C-p> :cp<CR>

" Allow deleting selection without updating the clipboard (yank buffer)
"noremap dd "_dd
"vnoremap x "_x
"vnoremap X "_X
" Don't move the cursor after pasting
" (by jumping to back start of previously changed text)
noremap p p`[
noremap P P`[

" Don't so help, really
noremap  <F1> :set invfullscreen<CR>
inoremap <F1> <ESC>:set invfullscreen<CR>a
" When scrolling, cursor stays in the middle
nnoremap <F1> :let &scrolloff=999-&scrolloff<CR>

" Visual text search
function! s:VSetSearch(cmdtype)
  let temp = @s
  norm! gv"sy
  let @/ = '\V' . substitute(escape(@s, a:cmdtype.'\'), '\n', '\\n', 'g')
  let @s = temp
endfunction
xnoremap * :<C-u>call <SID>VSetSearch('/')<CR>/<C-R>=@/<CR><CR>
xnoremap # :<C-u>call <SID>VSetSearch('?')<CR>?<C-R>=@/<CR><CR>

" Remove folds while in diff mode
if &diff
	set foldminlines=99999
endif

" Paste Mode On/Off
map <F10> :call Paste_on_off()<CR>
set pastetoggle=<F10>
let paste_mode = 0 " 0 = normal, 1 = paste
func! Paste_on_off()
	if g:paste_mode == 0
		set paste
		set nonumber
		let g:paste_mode = 1
	else
		set number
		set nopaste
		let g:paste_mode = 0
		endif
	return
endfunc

