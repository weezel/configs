autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red

"set term=screen-256color
if has("gui_running")
	set t_Co=256
	let moria_style='dark' "light
	let moria_fontface = 'mixed'
	"let moria_monochrome = 1
	set enc=utf8
	colors moria
	set guioptions-=T
	"set gfn=Monospace\ 9
	set gfn=Droid\ Sans\ Mono\ 9
	set cursorline
	set ttyfast
" feel free to choose :set background=light for a different style
else
	colors koehler
endif


" System
set nocompatible
set listchars=tab:>-,eol:$,trail:.,extends:#
set backspace=indent,eol,start
set tm=500 " time out to 500msec
set history=50
set wildignore=*.swp,*.bak,*.pyc,*.class
"set textwidth=78
"set softtabstop=4
"set shiftwidth=4
"set tabstop=4
botright cwindow
nnoremap Q gqap
vnoremap Q gq

" #######################
" Encoding section
" #######################
" Default file encoding for new files
setglobal fenc=utf-8
"
" Auto detect file encoding when opening a file. To check what file encoding was
" selected run ":set fenc" and if you know the auto detection failed and want to
" force another one run ":edit ++enc=<your_enc>".
set fencs=utf-8,latin-1

" Internal encoding used by vim buffers, help and commands
set encoding=utf-8

" Terminal encoding used for input and terminal display
" Make sure your terminal is configured with the same encoding.
set tenc=utf-8


" in human-language files, automatically format everything at 72 chars:
autocmd FileType mail,human set formatoptions+=t textwidth=72
" for C-like programming, have automatic indentation:
autocmd FileType c,cpp,slang set cindent
" for actual C (not C++) programming where comments have explicit end
" characters, if starting a new line in the middle of a comment automatically
" insert the comment leader characters:
autocmd FileType c set formatoptions+=ro

" Reveal extra white spaces
"highlight ExtraWhitespace ctermbg=red guibg=red
" Show trailing whitespace:
match ExtraWhitespace /\s\+$/
" Show trailing whitepace and spaces before a tab:
match ExtraWhitespace /\s\+$\| \+\ze\t/
" Alternatively, the following pattern will match trailing whitespace, except when typing at the end of a line.
"match ExtraWhitespace /\s\+\%#\@<!$/



"#################################
"########### Mappings ############
"#################################
" OmniComplete
inoremap <C-Space> <C-x><C-o>
"inoremap <C-k> <C-x><C-o>

" Allow deleting selection without updating the clipboard (yank buffer)
noremap dd "_dd
vnoremap x "_x
vnoremap X "_X
" Don't move the cursor after pasting
" (by jumping to back start of previously changed text)
noremap p p`[
noremap P P`[

" Visually select areas for folding, editing etc.
nnoremap <C-l> ^v%$

" Sorry Vim guys
inoremap <c-a> <esc>I
inoremap <c-e> <esc>A

" Useless crap
noremap  <F1> :set invfullscreen<CR>
inoremap <F1> <ESC>:set invfullscreen<CR>a


"#################################
"########### PLUGINS #############
"#################################
map <F3> :NERDTreeToggle<CR>
" Build tags of your own project with CTRL+F12
"map <C-F12> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>
noremap <F12> :!ectags -R --c++-kinds=+pl --fields=+iaS --extra=+q .<cr>
inoremap <F12> <Esc>:!ectags -R --c++-kinds=+pl --fields=+iaS --extra=+q .<cr>
" Paste Mode On/Off
map <F10> :call Paste_on_off()<CR>
set pastetoggle=<F10>
let paste_mode = 0 " 0 = normal, 1 = paste
func! Paste_on_off()
	if g:paste_mode == 0
		set paste
		set nonumber
		let g:paste_mode = 1
	else
		set number
		set nopaste
		let g:paste_mode = 0
		endif
	return
endfunc


" Visual
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y%{exists('g:loaded_fugitive')?fugitive#statusline():''}%{exists('g:loaded_rvm')?rvm#statusline():''}%=%-16(\ %l\[%v\],%c\ %)%P
syntax on

" Automatically open and close the popup menu / preview window
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
set completeopt=menuone,menu,longest,preview

set nowrap
set nobackup
"set list
set ruler
set laststatus=2
set hlsearch
set number
set wildmenu
set showcmd     " display incomplete commands
set incsearch   " do incremental searching


" Indent
set autoindent
set smarttab
set smartindent
set copyindent


" snipMate needs this
filetype on
filetype plugin indent on
"set autoindent

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
    set mouse=a
endif

" Tagglist settings
let Tlist_Ctags_Cmd="ectags"
"let Tlist_Auto_Open = 1
let Tlist_Winwidth = 60
let Tlist_Compact_Format = 1
let Tlist_Exit_OnlyWindow = 1
let Tlist_Use_Right_Window = 1
let Tlist_Auto_Highlight_Tag = 1
let Tlist_Auto_Update = 1
let Tlist_Show_One_File = 1
let Tlist_Sort_Type="name"
map <F4> :TlistToggle<cr>
map <F2> :TlistUpdate<cr>
" fold from { to }
"nmap <F1> /}<CR>zf%<ESC>:nohlsearch<CR>

" Session options
set sessionoptions=buffers,curdir,folds,tabpages

" Ctags path(s)
set tags+=$HOME/.vim/tags/c
"set tags+=$HOME/.vim/tags/cpp
set tags+=tags;/

