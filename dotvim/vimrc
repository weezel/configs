autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red

" Pathogen, yes please
call pathogen#infect()

if has("gui_running")
	"set background=dark
	"colors peaksea
	"let moria_fontface = 'mixed'
	"let moria_monochrome = 1
	"set enc=utf8
	set guioptions-=T " No toolbar
	set guioptions-=m " No menubar
	"set gfn=Monospace\ 9
	set gfn=Droid\ Sans\ Mono\ 10
	set cursorline
	set ttyfast
	set guicursor=a:blinkon0
endif


" Sanity check for colors
if $TERM == "xterm-256color" || $TERM == "screen-256color" || $COLORTERM == "gnome-terminal"
	set t_Co=256
endif

" System
colors peaksea
set background=dark

set nocompatible
set listchars=tab:>-,eol:$,trail:.,extends:#
set backspace=indent,eol,start
set tm=500 " time out to 500msec
set history=50
set wildignore=*.swp,*.bak,*.pyc,*.class,*.o

"set textwidth=78
"set softtabstop=4
"set shiftwidth=4
"set tabstop=4
botright cwindow
nnoremap Q gqap
vnoremap Q gq

" Visual
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y%{exists('g:loaded_fugitive')?fugitive#statusline():''}%{exists('g:loaded_rvm')?rvm#statusline():''}%=%-16(\ %l\[%v\],%c\ %)%P
syntax on

" Automatically open and close the popup menu / preview window
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
set completeopt=menuone,menu,longest,preview

set nowrap
set nobackup
set noswapfile
"set list
set ruler
set laststatus=2
set hlsearch
set number
set wildmenu
set showtabline=2
set showcmd     " display incomplete commands
set incsearch   " do incremental searching
set splitbelow
set splitright

" Indent
set autoindent
set smarttab
set smartindent
set copyindent

" snipMate needs this
filetype on
filetype plugin indent on
"set autoindent

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
    set mouse=a
endif

" #######################
" Encoding section
" #######################
" Default file encoding for new files
setglobal fenc=utf-8
"
" Auto detect file encoding when opening a file. To check what file encoding was
" selected run ":set fenc" and if you know the auto detection failed and want to
" force another one run ":edit ++enc=<your_enc>".
set fencs=utf-8,latin-1

" Internal encoding used by vim buffers, help and commands
set encoding=utf-8

" Terminal encoding used for input and terminal display
" Make sure your terminal is configured with the same encoding.
set tenc=utf-8

" in human-language files, automatically format everything at 72 chars:
autocmd FileType mail,human set formatoptions+=t textwidth=72
" for C-like programming, have automatic indentation:
autocmd FileType c,cpp,slang set cindent
" for actual C (not C++) programming where comments have explicit end
" characters, if starting a new line in the middle of a comment automatically
" insert the comment leader characters:
autocmd FileType c set formatoptions+=ro

" Reveal extra white spaces
"highlight ExtraWhitespace ctermbg=red guibg=red
" Show trailing whitespace:
match ExtraWhitespace /\s\+$/
" Show trailing whitepace and spaces before a tab:
match ExtraWhitespace /\s\+$\| \+\ze\t/
" Alternatively, the following pattern will match trailing whitespace, except when typing at the end of a line.
"match ExtraWhitespace /\s\+\%#\@<!$/

"#################################
"########### Mappings ############
"#################################
let mapleader = ","
nnoremap <leader>w <C-w>v<C-w>l

" Ctrl-C behaves like pressing Esc
inoremap <C-c> <Esc>

" Allow vi moving in insert mode when Alt is pressed
inoremap <A-h> <Left>
inoremap <A-k> <Up>
inoremap <A-j> <Down>
inoremap <A-l> <Right>
" Scrolling
nnoremap <C-A-j> <PageDown>
nnoremap <C-A-k> <PageUp>
inoremap <C-A-j> <ESC><C-E>i
inoremap <C-A-k> <ESC><C-Y>i
" Page up/down moving between tabs
nnoremap <C-j> :tabp<CR>
nnoremap <C-k> :tabn<CR>

" Sorry Vim guys, I'm used to readline
inoremap <C-a> <esc>I
inoremap <C-e> <esc>A
inoremap <A-f> <C-Right>
inoremap <A-b> <C-Left>

" More convenient moving between windows
nnoremap <M-h> <C-w>h
nnoremap <M-j> <C-w>j
nnoremap <M-k> <C-w>k
nnoremap <M-l> <C-w>l

" Open folds with space and create by Ctrl+space
map <Space> za
nnoremap <C-Space> zfa}

" OmniComplete
inoremap <C-Space> <C-x><C-u>
"inoremap <C-k> <C-x><C-o>

" FuzzyFindFile
nnoremap <C-f> :FufFile<CR>
inoremap <C-f> <Esc>:FufFile<CR>
nnoremap <C-b> :FufLine<CR>

" Tags completion
inoremap <C-]> <C-x><C-]>

"inoremap <C-b> <Esc>:FufBuffer<CR>

" Allow deleting selection without updating the clipboard (yank buffer)
noremap dd "_dd
vnoremap x "_x
vnoremap X "_X
" Don't move the cursor after pasting
" (by jumping to back start of previously changed text)
noremap p p`[
noremap P P`[

" Useless crap
noremap  <F1> :set invfullscreen<CR>
inoremap <F1> <ESC>:set invfullscreen<CR>a
" When scrolling, cursor stays in the middle
nnoremap <F1> :let &scrolloff=999-&scrolloff<CR>

" Visual text search
function! s:VSetSearch(cmdtype)
  let temp = @s
  norm! gv"sy
  let @/ = '\V' . substitute(escape(@s, a:cmdtype.'\'), '\n', '\\n', 'g')
  let @s = temp
endfunction
xnoremap * :<C-u>call <SID>VSetSearch('/')<CR>/<C-R>=@/<CR><CR>
xnoremap # :<C-u>call <SID>VSetSearch('?')<CR>?<C-R>=@/<CR><CR>

" Switch to header file
nmap <F4> :A<cr>

"#################################
"########### PLUGINS #############
"#################################
map <F3> :NERDTreeToggle<CR>
" Build tags of your own project with CTRL+F12
"map <C-F12> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>
noremap <F12> :!ectags -R --c++-kinds=+pl --fields=+iaS --extra=+q .<cr>
inoremap <F12> <Esc>:!ectags -R --c++-kinds=+pl --fields=+iaS --extra=+q .<cr>

" Clang_complete related
let g:clang_complete_auto = 0

" Paste Mode On/Off
map <F10> :call Paste_on_off()<CR>
set pastetoggle=<F10>
let paste_mode = 0 " 0 = normal, 1 = paste
func! Paste_on_off()
	if g:paste_mode == 0
		set paste
		set nonumber
		let g:paste_mode = 1
	else
		set number
		set nopaste
		let g:paste_mode = 0
		endif
	return
endfunc

" TagBar toggle
nmap <F2> :TagbarToggle<cr>

" Session options
set sessionoptions=buffers,curdir,folds,tabpages

" Ctags path(s)
set tags=./tags;/

" CScope thingies
if has("cscope")
	set csprg=/usr/local/bin/cscope
	set csto=0
	set cst
	set nocsverb
	" add any database in current directory
	if filereadable("cscope.out")
	    cs add cscope.out
	" else add database pointed to by environment
	elseif $CSCOPE_DB != ""
	    cs add $CSCOPE_DB
	endif
	set csverb
endif

